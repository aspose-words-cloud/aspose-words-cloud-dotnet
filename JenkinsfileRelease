properties([
	gitLabConnection('gitlab')
])

def buildCacheImage = "git.auckland.dynabic.com:4567/words-cloud/api/net"

node('win2019') {
	try {
		gitlabCommitStatus("checkout") {
			stage('checkout'){
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: "**"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '361885ba-9425-4230-950e-0af201d90547', url: 'https://git.auckland.dynabic.com/words-cloud/words-cloud-dotnet.git']]])
			}
		}

		gitlabCommitStatus("build") {
			stage('build'){
				env.SDK_VERSION = powershell(returnStdout: true, script:'echo ((ConvertFrom-Json -InputObject (New-Object System.Net.WebClient).DownloadString("https://api.aspose.cloud/v4.0/words/swagger/spec")).info.version | Select-String -Pattern "^\\d+\\.\\d+" ).Matches[0].Value').trim()
				
				withCredentials([file(credentialsId: 'pfxFile', variable: 'pfxFilePath')]) {
					powershell "Copy-Item $pfxFilePath -Destination  .\\scripts\\aspose.pfx"
				}
				
				withCredentials([file(credentialsId: 'snkFile', variable: 'snkFilePath')]) {
					powershell "Copy-Item $snkFilePath -Destination .\\scripts\\aspose.snk"
				}

				withCredentials([usernamePassword(credentialsId: 'cc2e3c9b-b3da-4455-b702-227bcce18895', usernameVariable: 'dockerrigistry_login', passwordVariable: 'dockerregistry_password')]) {
					bat 'docker login -u "%dockerrigistry_login%" -p "%dockerregistry_password%" git.auckland.dynabic.com:4567'
				}
				bat (script: "docker pull ${buildCacheImage}")

				bat (script: "docker build -m 4g -f scripts\\build.Dockerfile -t netsdkbuild --cache-from=${buildCacheImage} -t ${buildCacheImage} .")				
				
				powershell 'docker run -m 4g -v ${PWD}:C:\\Build\\ -e SDK_VERSION=$env:SDK_VERSION --isolation=hyperv netsdkbuild c:\\build\\scripts\\build-release.bat'
				
				stash name: "package", included: "packages\\*.nupkg"
			}
		}
		gitlabCommitStatus("prepare test env") {
			stage('prepare test env') {		
				bat 'mkdir testResults'
				bat 'mkdir Settings'
				withCredentials([usernamePassword(credentialsId: '6839cbe8-39fa-40c0-86ce-90706f0bae5d', passwordVariable: 'AppKey', usernameVariable: 'AppSid')]) {
					bat "echo {\"AppSid\":\"%AppSid%\",\"AppKey\":\"%AppKey%\", \"BaseUrl\":\"https://api-qa.aspose.cloud\" } > Settings\\servercreds.json"
				}
			}
		}
		gitlabCommitStatus("package net tests") {
			stage('package net tests') {	
				try {
					bat 'docker run -v %CD%:C:\\Build\\ --isolation=hyperv netsdkbuild c:\\build\\scripts\\addSource.bat net-test.bat Tests'
				} finally {
					junit '**\\testResults\\Tests-results-net452.xml'
				}
			}
		}
		gitlabCommitStatus("package core tests") {
			stage('package core tests') {					
				try {
					bat 'docker run -v %CD%:C:\\Build\\ --isolation=hyperv netsdkbuild c:\\build\\scripts\\addSource.bat core-test.bat Tests'
				} finally {
					junit '**\\testResults\\Tests-results-netcoreapp2.1.xml'
				}
			}
		}
		gitlabCommitStatus("package bdd net tests") {
			stage('package bdd net tests') {
				try {
					bat 'docker run -v %CD%:C:\\Build\\ --isolation=hyperv netsdkbuild c:\\build\\scripts\\addSource.bat net-test.bat BddTests'
				} finally {
					junit '**\\testResults\\BddTests-results-net452.xml'
				}
			}
		}
		gitlabCommitStatus("package bdd core tests") {
			stage('package bdd core tests') {
				try {
					bat 'docker run -v %CD%:C:\\Build\\ --isolation=hyperv netsdkbuild c:\\build\\scripts\\addSource.bat core-test.bat BddTests'
				} finally {
					junit '**\\testResults\\BddTests-results-netcoreapp2.1.xml'
				}
			}
		}
	} finally {
		bat 'docker system prune -f'
		deleteDir()
	}
}

stage('wait for publish confirmation'){
	timeout(time:1, unit:'DAYS') {
		input message:'Publish packet?'
	}
}	

node('win2019') {
	try {
		env.SDK_VERSION = powershell(returnStdout: true, script:'echo ((ConvertFrom-Json -InputObject (New-Object System.Net.WebClient).DownloadString("https://api.aspose.cloud/v4.0/words/swagger/spec")).info.version | Select-String -Pattern "^\\d+\\.\\d+" ).Matches[0].Value').trim()
		
		gitlabCommitStatus("checkout") {
			stage('checkout'){
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: "**"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '361885ba-9425-4230-950e-0af201d90547', url: 'https://git.auckland.dynabic.com/words-cloud/words-cloud-dotnet.git']]])
			}
		}
		
		gitlabCommitStatus("publish") {
			stage('publish') {
				unstash "package"
			
				withCredentials([string(credentialsId: 'nugetToken', variable: 'token')]) {
					bat '.nuget\\NuGet.exe push packages\\Aspose.Words-Cloud.%SDK_VERSION%.0.nupkg -ApiKey %token% -Timeout 610 -Source https://www.nuget.org/api/v2/package'
				}
			}
		}
		
		gitlabCommitStatus("add version tag") {
			stage('add version tag') {			
				bat "git config user.email 'jenkins.aspose@gmail.com'"
				bat "git config user.name 'jenkins'"
				
				bat "git clean -fd"
				bat 'git reset --hard origin/master'
				bat "git tag -a %SDK_VERSION% -m \"version %SDK_VERSION%\""
				
				withCredentials([usernamePassword(credentialsId: '361885ba-9425-4230-950e-0af201d90547', usernameVariable: 'gitUsername', passwordVariable: 'gitPass')]) {
					bat "git push https://%gitUsername%:%gitPass%@git.auckland.dynabic.com/words-cloud/words-cloud-dotnet.git %SDK_VERSION%"
				}
			}
		}
	} finally {
		deleteDir()
	}
}